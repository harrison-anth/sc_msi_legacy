}
for(sample in samp_list){
sample_info <- filter(key, filename == sample )
if(nrow(sample_info) == 0){
sample_info <- data.frame(patient_id = sample,
site ='tumor',
filename = sample,
msi_status = 'MSI-H',
msi_test='IHC/PCR')
}
#assign(x = paste0(sample),value = readRDS(paste0('../annotated_h5/',sample,'.rds')))
plotter(eval(readRDS(paste0('../annotated_h5/',sample,'.rds'))),
paste0(sample),
sample_info=sample_info)
}
key <- fread('../manifests/final_key.tsv')
samp_list <- fread('../manifests/all_samples.tsv',header=FALSE)
#or better yet
samp_list <- list.files(path='../annotated_h5/',pattern = '.rds',full.names=FALSE)
samp_list <- gsub(pattern = '.rds',replacement = '',x = samp_list)
#sanity check with just one
#samp_list <- samp_list[1:2]
sample <- samp_list[1]
sample
sample_info <- filter(key, filename == sample )
if(nrow(sample_info) == 0){
sample_info <- data.frame(patient_id = sample,
site ='tumor',
filename = sample,
msi_status = 'MSI-H',
msi_test='IHC/PCR')
}
plotter(eval(readRDS(paste0('../annotated_h5/',sample,'.rds'))),
paste0(sample),
sample_info=sample_info)
print(ll)
plotter(eval(readRDS(paste0('../annotated_h5/',sample,'.rds'))),
paste0(sample),
sample_info=sample_info)
plotter <- function(s_obj, sample_name,sample_info){
ll <- plot_density(s_obj,features = c('rna_MSH2','rna_MLH1',"rna_MLH3","rna_MSH3","rna_PMS1",'rna_MSH6','rna_PMS2'),joint = TRUE,combine = TRUE)
sensor2_global <- fread(paste0('../sensor2_results/',sample_name,'_msi_status'))
msings_global <- as.numeric(fread(paste0('../msings_results/', sample_name,'_msi_status.MSI_Analysis.txt'))[3,2])*100
pro_global <- fread(paste0('../pro_results/',sample_name,'_msi_status'))
plots <-  ggarrange(
print(FeaturePlot(s_obj,features=c('sensor2'),cols=c('blue','red')) +
ggtitle(paste0('MSIsensor2 (',sensor2_global$`%`,' overall)'))),
print(FeaturePlot(s_obj,features=c('msings'),cols=c('blue','red')) +
ggtitle(paste0('mSINGS (',msings_global,' overall)'))),
print(FeaturePlot(s_obj,features=c('pro'),cols=c('blue','red')) +
ggtitle(paste0('MSIsensor-pro (',pro_global$`%`,' overall)'))),
print(DimPlot(s_obj,group.by = 'numbat',cols=c('blue','red'))+ggtitle(paste0('Numbat'))),
#print(DimPlot(s_obj)+ggtitle(paste0('Clusters'))),
print(DimPlot(s_obj,group.by='copykat',cols=c('red','blue','grey'))+ggtitle(paste0('Copykat')))
)
print(annotate_figure(plots,top=text_grob(paste0(sample_info$filename,'; ',sample_info$site,'; ',
sample_info$msi_status,'; ',sample_info$msi_test),                    color='black',face='bold',size=20)))
print(ggarrange(FeaturePlot(s_obj,features=c('MSH2')),
FeaturePlot(s_obj,features=c('MSH6')),
FeaturePlot(s_obj,features=c('MLH1')),
FeaturePlot(s_obj,features=c('PMS2')),
common.legend = TRUE,
legend = 'right'))
print(ll)
}
plotter(eval(readRDS(paste0('../annotated_h5/',sample,'.rds'))),
paste0(sample),
sample_info=sample_info)
}
s_obj <- sample
sample_name <- 'EXT016'
ll <- plot_density(s_obj,features = c('rna_MSH2','rna_MLH1',"rna_MLH3","rna_MSH3","rna_PMS1",'rna_MSH6','rna_PMS2'),joint = TRUE,combine = TRUE)
ll <- plot_density(s_obj,features = c('rna_MSH2','rna_MLH1',"rna_MLH3","rna_MSH3","rna_PMS1",'rna_MSH6','rna_PMS2'),joint = TRUE,combine = TRUE)
s_obj
s_obj <- eval(readRDS(paste0('../annotated_h5/',sample,'.rds'))
)
ll <- plot_density(s_obj,features = c('rna_MSH2','rna_MLH1',"rna_MLH3","rna_MSH3","rna_PMS1",'rna_MSH6','rna_PMS2'),joint = TRUE,combine = TRUE)
ll
plot_density(s_obj,features = c('rna_MSH2','rna_MLH1',"rna_MLH3","rna_MSH3","rna_PMS1",'rna_MSH6','rna_PMS2'),joint = TRUE,combine = TRUE)
sensor2_global <- fread(paste0('../sensor2_results/',sample_name,'_msi_status'))
msings_global <- as.numeric(fread(paste0('../msings_results/', sample_name,'_msi_status.MSI_Analysis.txt'))[3,2])*100
pro_global <- fread(paste0('../pro_results/',sample_name,'_msi_status'))
plots <-  ggarrange(
print(FeaturePlot(s_obj,features=c('sensor2'),cols=c('blue','red')) +
ggtitle(paste0('MSIsensor2 (',sensor2_global$`%`,' overall)'))),
print(FeaturePlot(s_obj,features=c('msings'),cols=c('blue','red')) +
ggtitle(paste0('mSINGS (',msings_global,' overall)'))),
print(FeaturePlot(s_obj,features=c('pro'),cols=c('blue','red')) +
ggtitle(paste0('MSIsensor-pro (',pro_global$`%`,' overall)'))),
print(DimPlot(s_obj,group.by = 'numbat',cols=c('blue','red'))+ggtitle(paste0('Numbat'))),
#print(DimPlot(s_obj)+ggtitle(paste0('Clusters'))),
print(DimPlot(s_obj,group.by='copykat',cols=c('red','blue','grey'))+ggtitle(paste0('Copykat')))
)
print(annotate_figure(plots,top=text_grob(paste0(sample_info$filename,'; ',sample_info$site,'; ',
sample_info$msi_status,'; ',sample_info$msi_test),                    color='black',face='bold',size=20)))
print(ggarrange(FeaturePlot(s_obj,features=c('MSH2')),
FeaturePlot(s_obj,features=c('MSH6')),
FeaturePlot(s_obj,features=c('MLH1')),
FeaturePlot(s_obj,features=c('PMS2')),
common.legend = TRUE,
legend = 'right'))
print(ll)
plots <-  ggarrange(
print(FeaturePlot(s_obj,features=c('sensor2'),cols=c('blue','red')) +
ggtitle(paste0('MSIsensor2 (',sensor2_global$`%`,' overall)'))),
print(FeaturePlot(s_obj,features=c('msings'),cols=c('blue','red')) +
ggtitle(paste0('mSINGS (',msings_global,' overall)'))),
print(FeaturePlot(s_obj,features=c('pro'),cols=c('blue','red')) +
ggtitle(paste0('MSIsensor-pro (',pro_global$`%`,' overall)'))),
print(DimPlot(s_obj,group.by = 'numbat',cols=c('blue','red'))+ggtitle(paste0('Numbat'))),
#print(DimPlot(s_obj)+ggtitle(paste0('Clusters'))),
print(DimPlot(s_obj,group.by='copykat',cols=c('red','blue','grey'))+ggtitle(paste0('Copykat')))
)
print(annotate_figure(plots,top=text_grob(paste0(sample_info$filename,'; ',sample_info$site,'; ',
sample_info$msi_status,'; ',sample_info$msi_test),                    color='black',face='bold',size=20)))
print(ggarrange(FeaturePlot(s_obj,features=c('rna_MSH2')),
FeaturePlot(s_obj,features=c('rna_MSH6')),
FeaturePlot(s_obj,features=c('rna_MLH1')),
FeaturePlot(s_obj,features=c('rna_PMS2')),
common.legend = TRUE,
legend = 'right'))
print(ll)
}
FeaturePlot(s_obj,features=c('s_obj$MSH2'))
FeaturePlot(s_obj,features=c('MSH2'))
DimPlot(s_obj,group.by='MSH2')
DimPlot(s_obj,group.by='MSH2_45973')
DimPlot(s_obj,group.by='MLH1')
DimPlot(s_obj,group.by='MSH2')
DimPlot(s_obj,group.by='MSH3')
DimPlot(s_obj,group.by='MSH5')
DimPlot(s_obj,group.by='TP53')
DimPlot(s_obj,group.by='KRAS')
DimPlot(s_obj,features=c('MSH2','MSH3','MSH6','MLH1','MLH3','PMS1','PMS2','KRAS','TP53','BRAF'))
DimPlot(s_obj,features=c('MSH2','MSH3','MSH6','MLH1','MLH3','PMS1','PMS2','KRAS','TP53','BRAF'))
DimPlot(s_obj,features=c('MSH2','MSH3','MSH6','MLH1','MLH3','PMS1','PMS2','KRAS','TP53','BRAF'))
DimPlot(s_obj,group.by=c('MSH2','MSH3','MSH6','MLH1','MLH3','PMS1','PMS2','KRAS','TP53','BRAF'))
print(ggarrange(DimPlot(s_obj,group.by='MSH2')),
DimPlot(s_obj,group.by='MSH3'),
DimPlot(s_obj,group.by='MSH6'),
DimPlot(s_obj,group.by='MLH1'),
DimPlot(s_obj,group.by='MLH3'),
DimPlot(s_obj,group.by='PMS1'),
DimPlot(s_obj,group.by='PMS2'),
DimPlot(s_obj,group.by='KRAS'),
DimPlot(s_obj,group.by='TP53'),
DimPlot(s_obj,group.by='BRAF'),
common.legend=TRUE,
legend='right')
print(ggarrange(DimPlot(s_obj,group.by='MSH2')),
DimPlot(s_obj,group.by='MSH3'),
DimPlot(s_obj,group.by='MSH6'),
DimPlot(s_obj,group.by='MLH1'),
DimPlot(s_obj,group.by='MLH3'),
DimPlot(s_obj,group.by='PMS1'),
DimPlot(s_obj,group.by='PMS2'),
DimPlot(s_obj,group.by='KRAS'),
DimPlot(s_obj,group.by='TP53'),
DimPlot(s_obj,group.by='BRAF'),
common.legend=TRUE,
legend='right')
print(ggarrange(DimPlot(s_obj,group.by='MSH2'),
DimPlot(s_obj,group.by='MSH3'),
DimPlot(s_obj,group.by='MSH6'),
DimPlot(s_obj,group.by='MLH1'),
DimPlot(s_obj,group.by='MLH3'),
DimPlot(s_obj,group.by='PMS1'),
DimPlot(s_obj,group.by='PMS2'),
DimPlot(s_obj,group.by='KRAS'),
DimPlot(s_obj,group.by='TP53'),
DimPlot(s_obj,group.by='BRAF'),
common.legend=TRUE,
legend='right'))
library(maftools)
if (!require("BiocManager"))
install.packages("BiocManager")
BiocManager::install("maftools")
library(maftools)
read.maf('../maf/EXT016.maf')
maf <- read.maf('../maf/EXT016.maf')
maf
plotmafSummary(maf=maf, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE))
plotmafSummary(maf=maf, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
plotmafSummary(maf=maf, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
plotmafSummary(maf=maf, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
maf@gene.summary$Hugo_Symbol
"MSH2" %in% maf@gene.summary$Hugo_Symbol
"MSH3" %in% maf@gene.summary$Hugo_Symbol
"MLH1" %in% maf@gene.summary$Hugo_Symbol
#good notes https://satijalab.org/seurat/articles/pbmc3k_tutorial.html#setup-the-seurat-object
knitr::opts_chunk$set(echo = FALSE,warning=FALSE,message = FALSE)
knitr::opts_knit$set(root.dir = 'C:/Users/Harrison Anthony/Desktop/git_repos/single_msi/markdown_files/')
library(Seurat)
library(patchwork)
library(tidyverse)
library(scAnnotatR)
library(PreMSIm)
library(data.table)
library(cowplot)
library(Nebulosa)
library(ggpubr)
set.seed(seed = 152727)
path = system.file("extdata", "example.txt", package = "PreMSIm", mustWork = TRUE)
input_data = data_pre(path, type = "ID")
#cell labeller models pretrained from scannotater
#default_models <- load_models("default")
process_data <- function(file_name,sample_name,filter_norm){
print(paste("Begin processing sample",sample_name,sep=" "))
print(paste("Read in file",file_name,sep=" "))
temp <- Read10X_h5(filename = paste0("cell_ranger_matrices/new/",file_name))
print(paste("Converting to Seurat object, filtering, and normalizing"))
temp <- CreateSeuratObject(counts=temp,
project="MSI",
min.cells=3,
min.features=200)
#add percent mitochondrial
temp[["percent.mt"]] <- PercentageFeatureSet(temp, pattern = "^MT-")
#filter by minimum/maximum number of genes and percent mitochondrial
#show pre-filter graphs
#VlnPlot(temp, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
#show feature scatterplot between any two features
#FeatureScatter(temp,feature1="nCount_RNA",feature2="percent.mt")
print(paste('Filtering normal cells'))
copykat <- fread(paste0('copy_kat_results/',sample_name,'_copykat_prediction.txt'))
temp[['tumor']] <- NA
for (i in 1:length(names(temp$tumor))){
temp2 <- filter(copykat, cell.names == names(temp$tumor[i]))
temp$tumor[i] <- temp2$copykat.pred
}
if(filter_norm==TRUE)
{
temp <- subset(temp,subset=tumor == "aneuploid")
}
temp <- subset(temp,subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
temp <- NormalizeData(temp,normalization.method = "LogNormalize",scale.factor = 10000)
temp <- FindVariableFeatures(temp, selection.method = "vst", nfeatures = 2000)
#plot most variable genes
#top10 <- head(VariableFeatures(temp),10)
#LabelPoints(plot=(VariableFeaturePlot(temp),points=top10,repel=TRUE))
#scale data
all.genes <- rownames(temp)
#might still need to "regress out" mitchonodrial and other sources of variation
temp <- ScaleData(temp,feature=all.genes)
temp <- RunPCA(temp, features=VariableFeatures(object=temp))
print(paste("Identifying clusters"))
temp <- FindNeighbors(temp,dims=1:15)
temp <- FindClusters(temp,resolution = 0.5)
temp <- RunUMAP(temp, dims = 1:15)
#find marker genes that are differentially expressed in clusters
return(temp)
}
single_msi <- function(s_obj){
s_obj[['msi_status']] <- NA
temp <- t(as.data.frame(as.matrix(GetAssayData(s_obj,assay = 'RNA',slot = 'scale.data'))))
msi_results <- msi_pre(temp[,c(colnames(input_data))])
for (i in 1:length(names(s_obj$msi_status))){
temp2 <- filter(msi_results, Sample == names(s_obj$msi_status[i]))
s_obj$msi_status[i] <- as.numeric(as.character(droplevels(temp2$MSI_status)))
}
return(s_obj)
}
#read in sensor2 data for each cluster
sensor2 <- function(s_obj,sample_name,abc){
s_obj[['sensor2']] <- NA
if(abc == FALSE){
cluster_info <- fread(paste0('cluster_barcodes/',sample_name,'_cancer_barcodes.tsv'))
cluster_info <- data.frame(clusters = sort(unique(cluster_info$V2)))
for(i in 1:nrow(cluster_info)){
num <- cluster_info$clusters[i]
temp15 <- fread(paste0('sensor2_results/all_clusters/',sample_name,'_cluster_',num))
cluster_info$msi[i] <- temp15$`%`
cluster_info$tot_sites[i] <- temp15$Total_Number_of_Sites
}
} else if (abc == TRUE){
cluster_info <- fread(paste0('cluster_barcodes/',sample_name,'_all_barcodes.tsv'))
cluster_info <- data.frame(clusters = sort(unique(cluster_info$V2)))
for(i in 1:nrow(cluster_info)){
num <- cluster_info$clusters[i]
temp15 <- fread(paste0('sensor2_results/all_clusters/',sample_name,'_cluster_',num))
cluster_info$msi[i] <- temp15$`%`
cluster_info$tot_sites[i] <- temp15$Total_Number_of_Sites
}
for(i in 1:nrow(s_obj[['sensor2']])){
temp_name <- names(s_obj$sensor2[i])
temp_cluster <- as.numeric(as.character(s_obj$seurat_clusters[temp_name == names(s_obj$seurat_clusters)]))
temp_msi_score <- filter(cluster_info, clusters == temp_cluster)
s_obj$sensor2[i] <- temp_msi_score$msi
}
}
return(s_obj)
}
plotter <- function(s_obj, sample_name,sample_info){
ll <- plot_density(s_obj,features = c('rna_MSH2','rna_MLH1',"rna_MLH3","rna_MSH3","rna_PMS1",'rna_MSH6','rna_PMS2'),joint = TRUE,combine = TRUE)
sensor2_global <- fread(paste0('../sensor2_results/',sample_name,'_msi_status'))
msings_global <- as.numeric(fread(paste0('../msings_results/', sample_name,'_msi_status.MSI_Analysis.txt'))[3,2])*100
pro_global <- fread(paste0('../pro_results/',sample_name,'_msi_status'))
plots <-  ggarrange(
print(FeaturePlot(s_obj,features=c('sensor2'),cols=c('blue','red')) +
ggtitle(paste0('MSIsensor2 (',sensor2_global$`%`,' overall)'))),
print(FeaturePlot(s_obj,features=c('msings'),cols=c('blue','red')) +
ggtitle(paste0('mSINGS (',msings_global,' overall)'))),
print(FeaturePlot(s_obj,features=c('pro'),cols=c('blue','red')) +
ggtitle(paste0('MSIsensor-pro (',pro_global$`%`,' overall)'))),
print(DimPlot(s_obj,group.by = 'numbat',cols=c('blue','red'))+ggtitle(paste0('Numbat'))),
#print(DimPlot(s_obj)+ggtitle(paste0('Clusters'))),
print(DimPlot(s_obj,group.by='copykat',cols=c('red','blue','grey'))+ggtitle(paste0('Copykat')))
)
print(annotate_figure(plots,top=text_grob(paste0(sample_info$filename,'; ',sample_info$site,'; ',
sample_info$msi_status,'; ',sample_info$msi_test),                    color='black',face='bold',size=20)))
print(ggarrange(FeaturePlot(s_obj,features=c('rna_MSH2')),
FeaturePlot(s_obj,features=c('rna_MSH6')),
FeaturePlot(s_obj,features=c('rna_MLH1')),
FeaturePlot(s_obj,features=c('rna_PMS2')),
common.legend = TRUE,
legend = 'right'))
print(ggarrange(DimPlot(s_obj,group.by='MSH2'),
DimPlot(s_obj,group.by='MSH3'),
DimPlot(s_obj,group.by='MSH6'),
DimPlot(s_obj,group.by='MLH1'),
DimPlot(s_obj,group.by='MLH3'),
common.legend=TRUE,
legend='right'))
print(ggarrange(DimPlot(s_obj,group.by='PMS1'),
DimPlot(s_obj,group.by='PMS2'),
DimPlot(s_obj,group.by='KRAS'),
DimPlot(s_obj,group.by='TP53'),
DimPlot(s_obj,group.by='BRAF'),
common.legend=TRUE,
legend='right'))
#print(ll)
}
#to print violin plot VlnPlot(test, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
maf_files = list.files(path = "../maf/", pattern = ".maf", full.names = TRUE)
mymaf = maftools::merge_mafs(mafs = maf_files, verbose = TRUE)
plotmafSummary(maf = mymaf, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
mymaf
mymaf@data$Hugo_Symbol
"KRAS" %in% mymaf@data$Hugo_Symbol
"TP53" %in% mymaf@data$Hugo_Symbol
"BRAF" %in% mymaf@data$Hugo_Symbol
mymaf@data$Hugo_Symbol
"MLH1" %in% mymaf@data$Hugo_Symbol
oncoplot(mymaf,top=20)
oncoplot(mymaf,top=20)
oncoplot(mymaf)
oncoplot(maf = mymaf)
lollipopPlot(maf=mymaf,gene='MLH1',AACol='Protein_Cahnge')
lollipopPlot(maf=mymaf,gene='MLH1',AACol='Protein_Change')
lollipopPlot(maf=mymaf,gene='MLH1',AACol='Consequence')
lollipopPlot(maf=mymaf,gene='MLH1')
plotVaf(maf = mymaf, vafCol = 'i_TumorVAF_WU')
mymaf@data$n_depth
mymaf@data$Match_Norm_Seq_Allele2
mymaf@data$t_depth
mymaf@data$t_depth
maf_files = list.files(path = "../maf/", pattern = ".maf", full.names = TRUE)
mymaf = maftools::merge_mafs(mafs = maf_files, verbose = TRUE)
plotmafSummary(mymaf)
plotmafSummary(mymaf)
plotmafSummary(mymaf)
plotmafSummary(mymaf)
knitr::opts_chunk$set(echo = FALSE,warning = FALSE,message=FALSE,dev='png',dpi=300)
#knitr::opts_chunk$set(fig.path = 'C:/Users/Harrison Anthony/Desktop/msi_benchmark_results/')
#knitr::opts_knit$set(root.dir = 'C:/Users/Harrison Anthony/Desktop/msi_benchmark_results/')
library(Seurat)
library(gridExtra)
library(patchwork)
library(tidyverse)
library(scAnnotatR)
library(data.table)
library(cowplot)
library(Nebulosa)
library(ggpubr)
library(R.utils)
library(kableExtra)
set.seed(seed = 152727)
key <- fread('C:/Users/Harrison Anthony/Desktop/git_repos/single_msi/manifests/final_key.tsv')
files <- list.files(path='E:/temp/new_int/',pattern = '*.rds')
for(file in files){
file_name <- gsub(pattern = '.rds',replacement = '',x = file)
sample_info <- filter(key, patient_id == file_name )
if(nrow(sample_info) == 0){
sample_info <- data.frame(patient_id = sample,
site ='tumor',
filename = sample,
msi_status = 'MSI-H',
msi_test='IHC/PCR')
}
assign(x = 's_obj',value = readRDS(paste0('E:/temp/new_int/',file)))
assign(x = 's_obj_cancer',value = readRDS(paste0('E:/temp/new_int/cancer_only/',file_name,'_cancer.rds')))
#print(paste('Integrated samples for',sample_info$patient_id[1],'. They are MSS, determined #by',sample_info$msi_test[1],'. This integration includes the following tissues: ',
#c(sample_info$site[1:nrow(sample_info)])))
plots <-  ggarrange(
print(DimPlot(s_obj)+ggtitle(paste0('Clusters'))),
print(DimPlot(s_obj, group.by = "scATOMIC_pred",cols=c(DiscretePalette(length(unique(s_obj$scATOMIC_pred)), palette = NULL, shuffle = FALSE))) + ggtitle("ATOMIC cells")+
labs(fill="cell types")+
guides(colour = guide_legend(override.aes = list(size=1.6),ncol=1))+
theme(legend.text=element_text(size=7))),
print(FeaturePlot(s_obj,features=c('sensor_rna_prob'),cols=c('blue','red')) +
ggtitle('sensor_rna probs')),
print(DimPlot(s_obj,group.by='sensor_rna_status',cols=c('red','blue'))+ggtitle(paste0('sensor_rna'))),
nrow=1,ncol=1
)
plots2 <-  ggarrange(
print(DimPlot(s_obj_cancer)+ggtitle(paste0('Clusters'))),
print(DimPlot(s_obj_cancer, group.by = "scATOMIC_pred",cols=c(DiscretePalette(length(unique(s_obj_cancer$scATOMIC_pred)), palette = NULL, shuffle = FALSE))) + ggtitle("ATOMIC cells")+
labs(fill="cell types")+
guides(colour = guide_legend(override.aes = list(size=1.6),ncol=1))+
theme(legend.text=element_text(size=7))),
print(FeaturePlot(s_obj_cancer,features=c('sensor_rna_prob'),cols=c('blue','red')) +
ggtitle('sensor_rna probs')),
print(DimPlot(s_obj_cancer,group.by='sensor_rna_status',cols=c('red','blue'))+ggtitle(paste0('sensor_rna'))),
nrow=1,ncol=1
)
print(kable_styling(kable(sample_info)))
print(plots)
print(plots2)
cat("\n\n\\pagebreak\n")
}
knitr::opts_chunk$set(echo = FALSE,warning = FALSE,message=FALSE,dev='png',dpi=300)
#knitr::opts_chunk$set(fig.path = 'C:/Users/Harrison Anthony/Desktop/msi_benchmark_results/')
#knitr::opts_knit$set(root.dir = 'C:/Users/Harrison Anthony/Desktop/msi_benchmark_results/')
library(Seurat)
library(gridExtra)
library(patchwork)
library(tidyverse)
library(scAnnotatR)
library(data.table)
library(cowplot)
library(Nebulosa)
library(ggpubr)
library(R.utils)
library(kableExtra)
set.seed(seed = 152727)
key <- fread('C:/Users/Harrison Anthony/Desktop/git_repos/single_msi/manifests/final_key.tsv')
key
for(file in files){
file_name <- gsub(pattern = '.rds',replacement = '',x = file)
sample_info <- filter(key, patient_id == file_name )
if(nrow(sample_info) == 0){
sample_info <- data.frame(patient_id = sample,
site ='tumor',
filename = sample,
msi_status = 'MSI-H',
msi_test='IHC/PCR')
}
assign(x = 's_obj',value = readRDS(paste0('E:/temp/new_int/',file)))
assign(x = 's_obj_cancer',value = readRDS(paste0('E:/temp/new_int/cancer_only/',file_name,'_cancer.rds')))
#print(paste('Integrated samples for',sample_info$patient_id[1],'. They are MSS, determined #by',sample_info$msi_test[1],'. This integration includes the following tissues: ',
#c(sample_info$site[1:nrow(sample_info)])))
plots <-  ggarrange(
print(DimPlot(s_obj)+ggtitle(paste0('Clusters'))),
print(DimPlot(s_obj, group.by = "scATOMIC_pred",cols=c(DiscretePalette(length(unique(s_obj$scATOMIC_pred)), palette = NULL, shuffle = FALSE))) + ggtitle("ATOMIC cells")+
labs(fill="cell types")+
guides(colour = guide_legend(override.aes = list(size=1.6),ncol=1))+
theme(legend.text=element_text(size=7))),
print(FeaturePlot(s_obj,features=c('sensor_rna_prob'),cols=c('blue','red')) +
ggtitle('sensor_rna probs')),
print(DimPlot(s_obj,group.by='sensor_rna_status',cols=c('red','blue'))+ggtitle(paste0('sensor_rna'))),
nrow=1,ncol=1
)
plots2 <-  ggarrange(
print(DimPlot(s_obj_cancer)+ggtitle(paste0('Clusters'))),
print(DimPlot(s_obj_cancer, group.by = "scATOMIC_pred",cols=c(DiscretePalette(length(unique(s_obj_cancer$scATOMIC_pred)), palette = NULL, shuffle = FALSE))) + ggtitle("ATOMIC cells")+
labs(fill="cell types")+
guides(colour = guide_legend(override.aes = list(size=1.6),ncol=1))+
theme(legend.text=element_text(size=7))),
print(FeaturePlot(s_obj_cancer,features=c('sensor_rna_prob'),cols=c('blue','red')) +
ggtitle('sensor_rna probs')),
print(DimPlot(s_obj_cancer,group.by='sensor_rna_status',cols=c('red','blue'))+ggtitle(paste0('sensor_rna'))),
nrow=1,ncol=1
)
print(kable_styling(kable(sample_info)))
print(plots)
print(plots2)
cat("\n\n\\pagebreak\n")
}
file
i
file_name
file_name <- gsub(pattern = '.rds',replacement = '',x = file)
sample_info <- filter(key, patient_id == file_name )
if(nrow(sample_info) == 0){
sample_info <- data.frame(patient_id = sample,
site ='tumor',
filename = sample,
msi_status = 'MSI-H',
msi_test='IHC/PCR')
}
assign(x = 's_obj',value = readRDS(paste0('E:/temp/new_int/',file)))
plots <-  ggarrange(
print(DimPlot(s_obj)+ggtitle(paste0('Clusters'))),
print(DimPlot(s_obj, group.by = "scATOMIC_pred",cols=c(DiscretePalette(length(unique(s_obj$scATOMIC_pred)), palette = NULL, shuffle = FALSE))) + ggtitle("ATOMIC cells")+
labs(fill="cell types")+
guides(colour = guide_legend(override.aes = list(size=1.6),ncol=1))+
theme(legend.text=element_text(size=7))),
print(FeaturePlot(s_obj,features=c('sensor_rna_prob'),cols=c('blue','red')) +
ggtitle('sensor_rna probs')),
print(DimPlot(s_obj,group.by='sensor_rna_status',cols=c('red','blue'))+ggtitle(paste0('sensor_rna'))),
nrow=1,ncol=1
)
plots <-  ggarrange(
print(DimPlot(s_obj)+ggtitle(paste0('Clusters'))),
print(DimPlot(s_obj, group.by = "scATOMIC_pred",cols=c(DiscretePalette(length(unique(s_obj$scATOMIC_pred)), palette = NULL, shuffle = FALSE))) + ggtitle("ATOMIC cells")+
labs(fill="cell types")+
guides(colour = guide_legend(override.aes = list(size=1.6),ncol=1))+
theme(legend.text=element_text(size=7))),
print(FeaturePlot(s_obj,features=c('sensor_rna_prob'),cols=c('blue','red')) +
ggtitle('sensor_rna probs')),
print(DimPlot(s_obj,group.by='sensor_rna_status',cols=c('red','blue'))+ggtitle(paste0('sensor_rna'))),
nrow=1,ncol=1
)
